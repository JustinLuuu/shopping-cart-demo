import { useContext, useEffect, useState, useRef } from "react";
import Head from "next/head";
import { Box, CircularProgress, IconButton, InputBase, Paper, Typography, Select, MenuItem, InputLabel, FormControl } from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import { ProductList } from "@/modules/product/components/ProductList";
import { useFetchData } from "@/hooks/useFetchData";
import { ProductsContext } from "@/context/ProductsContext";
import FilterAltOffIcon from "@mui/icons-material/FilterAltOff";

const url = "/api/products";
const orderByOptions = ["unset", "quantity", "favorites"];

export default function Home() {
  const { products, cart, favs, handleInitProducts } = useContext(ProductsContext);
  const { data, isLoading, } = useFetchData(url, products.length === 0);

  const skipOrderByRef = useRef(false);
  const [productsFiltered, setProductsFiltered] = useState([]);
  const [filterValue, setFilterValue] = useState("");
  const [orderBy, setOrderBy] = useState("unset");

  const handleFilterProducts = () => {
    let filtered = [...products];
    if (filterValue) {
      filtered = filtered.filter(p => p?.name?.replace(/ /g, "").toLowerCase()?.includes(filterValue.replace(/ /g, "").toLowerCase()));
    }

    if (orderBy !== "unset") {
      if (orderBy === "quantity") {
        filtered = filtered.sort((a, b) => {
          const aQuantity = cart.find(p => p.id === a.id)?.quantity || 0;
          const bQuantity = cart.find(p => p.id === b.id)?.quantity || 0;
          return bQuantity - aQuantity;
        });
      }

      if (orderBy === "favorites") {
        filtered = filtered.sort((a, b) => {
          const aFound = favs.some(p => p.id === a.id);
          const bFound = favs.some(p => p.id === b.id);
          return bFound - aFound;
        });
      }
    }

    setProductsFiltered(() => filtered);
  }

  const handleClearFilters = () => {
    setFilterValue("");
    setOrderBy("unset");
  }

  //avoiding reorder, for keeping elements on the same order at manipulating
  const handleResetOrderBy = () => {
    skipOrderByRef.current = true;
    setOrderBy("unset");
  }

  useEffect(() => {
    data && handleInitProducts(data.products);
  }, [data]);

  // at updating cart or favs, changing quantity or putting fav
  useEffect(() => {
    if (orderBy !== "unset") {
      handleResetOrderBy();
    }
  }, [cart, favs]);

  useEffect(() => {
    if (skipOrderByRef.current) { //avoiding reorder
      skipOrderByRef.current = false;
      return;
    }

    handleFilterProducts();
  }, [filterValue, orderBy, products]);

  return (
    <>
      <Head>
        <title>Shopping Cart</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2280%22>ðŸ›’</text></svg>" />
      </Head>

      <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", marginBottom: 6 }}>
        <Typography component="h1" variant="h4" textAlign="center">
          Product List
        </Typography>

        <Box>
          <Paper
            sx={{ p: "5px 4px", display: "flex", alignItems: "center", width: 300, marginTop: 2 }}
          >
            <InputBase
              sx={{ ml: 1, flex: 1 }}
              placeholder="Search Products..."
              inputProps={{ "aria-label": "Search..." }}
              value={filterValue}
              onChange={(e) => setFilterValue(e.target.value)}
            />
            <IconButton type="button" sx={{ p: "10px" }} aria-label="search">
              <SearchIcon />
            </IconButton>
          </Paper>
        </Box>
      </Box>

      <Box sx={{ marginY: 2, display: "flex", justifyContent: "start" }}>
        <FormControl size="small" color="info">
          <InputLabel>Order BY</InputLabel>
          <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <Select
              color="info"
              value={orderBy}
              label="Order By"
              onChange={(e) => setOrderBy(e.target.value)}
              sx={{
                width: "120px",
                color: "#0288D1",
                textTransform: "capitalize",
                ".MuiOutlinedInput-notchedOutline": {
                  borderColor: "#0288D1",
                },
                "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                  borderColor: "#0288D1",
                },
                "&:hover .MuiOutlinedInput-notchedOutline": {
                  borderColor: "#0288D1",
                },
                ".MuiSvgIcon-root": {
                  color: "#0288D1",
                },
              }}
            >
              {
                orderByOptions.map(option => (
                  <MenuItem
                    key={option}
                    value={option}
                    sx={{ textTransform: "capitalize" }}
                  >
                    {option}
                  </MenuItem>
                ))
              }
            </Select>
            <IconButton
              title="Clear"
              onClick={handleClearFilters}
            >
              <FilterAltOffIcon />
            </IconButton>
          </Box>
        </FormControl>
      </Box>

      {
        isLoading ? (
          <CircularProgress sx={{ margin: "auto" }} />
        ) : (
          <ProductList products={productsFiltered} />
        )
      }

      {
        (filterValue && productsFiltered.length === 0) && (
          <Typography component="p" variant="h4" textAlign="center" color="gray">
            No Results
          </Typography>
        )
      }
    </>
  );
}
