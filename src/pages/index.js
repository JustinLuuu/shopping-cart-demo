import { Box, CircularProgress, IconButton, InputBase, Paper, Typography } from "@mui/material";
import SearchIcon from '@mui/icons-material/Search';
import Head from "next/head";
import { ProductList } from "@/modules/product/components/ProductList";
import { useFetchData } from "@/hooks/useFetchData";
import { useContext, useEffect, useState } from "react";
import { ProductsContext } from "@/context/ProductsContext";

const url = "/api/products";

export default function Home() {
  const { products, handleInitProducts } = useContext(ProductsContext);
  const { data, isLoading, } = useFetchData(url, products.length === 0);
  const [productsFiltered, setProductsFiltered] = useState([]);
  const [filterValue, setFilterValue] = useState("");

  const handleFilterProducts = () => {
    let filtered = [...products];
    if (filterValue) {
      filtered = filtered.filter(p => p?.name?.replace(/ /g, "").toLowerCase()?.includes(filterValue.replace(/ /g, "").toLowerCase()))
    }
    setProductsFiltered(() => filtered);
  }

  useEffect(() => {
    data && handleInitProducts(data.products);
  }, [data]);

  useEffect(() => {
    handleFilterProducts();
  }, [filterValue, products]);

  return (
    <>
      <Head>
        <title>Cart Demo Practice</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", marginBottom: 6 }}>
        <Typography component="h1" variant="h4" textAlign="center">
          Product List
        </Typography>

        <Paper
          sx={{ p: '5px 4px', display: 'flex', alignItems: 'center', width: 300, marginTop: 2 }}
        >
          <InputBase
            sx={{ ml: 1, flex: 1 }}
            placeholder="Search Products..."
            inputProps={{ 'aria-label': 'Search...' }}
            value={filterValue}
            onChange={(e) => setFilterValue(e.target.value)}
          />
          <IconButton type="button" sx={{ p: '10px' }} aria-label="search">
            <SearchIcon />
          </IconButton>
        </Paper>
      </Box>

      {
        isLoading ? (
          <CircularProgress sx={{ margin: "auto" }} />
        ) : (
          <ProductList products={productsFiltered} />
        )
      }

      {
        (filterValue && productsFiltered.length === 0) && (
          <Typography component="p" variant="h4" textAlign="center" color="gray">
            No Results
          </Typography>
        )
      }
    </>
  );
}
